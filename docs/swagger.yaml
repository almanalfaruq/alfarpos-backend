basePath: /api/
definitions:
  model.Category:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Category
        type: string
      updated_at:
        type: string
    type: object
  model.Customer:
    properties:
      address:
        example: Pengging, Banyudono, Boyolali
        type: string
      code:
        example: code-1
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Customer
        type: string
      phone:
        example: "081234567890"
        type: string
      updated_at:
        type: string
    type: object
  model.OrderDetail:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        example: 1
        type: integer
      order_id:
        example: 1
        type: integer
      product:
        $ref: '#/definitions/model.Product'
        type: object
      product_id:
        type: integer
      quantity:
        example: 2
        type: integer
      sell_price:
        example: 15000
        type: integer
      sub_total:
        example: 5000
        type: integer
      updated_at:
        type: string
    type: object
  model.Payment:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Cash
        type: string
      updated_at:
        type: string
    type: object
  model.Product:
    properties:
      buy_price:
        example: "10000"
        type: string
      category:
        $ref: '#/definitions/model.Category'
        type: object
      category_id:
        example: 1
        type: integer
      code:
        example: "81921872917"
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      discount:
        example: 0.1
        type: number
      id:
        example: 1
        type: integer
      image_url:
        example: http://localhost/image/image.jpg
        type: string
      name:
        example: product name
        type: string
      product_prices:
        items:
          $ref: '#/definitions/model.ProductPrice'
        type: array
      quantity:
        example: "10"
        type: string
      sell_price:
        example: "15000"
        type: string
      unit:
        $ref: '#/definitions/model.Unit'
        type: object
      unit_id:
        example: 2
        type: integer
      updated_at:
        type: string
    type: object
  model.ProductPrice:
    properties:
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        example: 1
        type: integer
      product_id:
        type: integer
      quantity_multiplier:
        example: 3
        type: integer
      sell_price:
        example: 15000
        type: integer
      updated_at:
        type: string
    type: object
  model.Unit:
    properties:
      code:
        example: KRT40
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Unit
        type: string
      total_pcs:
        example: 1
        type: integer
      updated_at:
        type: string
    type: object
  order.Order:
    properties:
      amount_paid:
        example: 150000
        type: integer
      created_at:
        type: string
      customer:
        $ref: '#/definitions/model.Customer'
        type: object
      customer_id:
        example: 1
        type: integer
      deleted_at:
        type: string
      discount:
        example: 0
        type: number
      id:
        example: 1
        type: integer
      invoice:
        example: 5-9-2020-000001
        type: string
      note:
        example: This was a pending transaction for specific customer
        type: string
      order_details:
        items:
          $ref: '#/definitions/model.OrderDetail'
        type: array
      payment:
        $ref: '#/definitions/model.Payment'
        type: object
      payment_id:
        example: 1
        type: integer
      ppn:
        example: 13000
        type: integer
      status:
        type: integer
      total:
        example: 130000
        type: integer
      total_change:
        example: 20000
        type: integer
      updated_at:
        type: string
      user:
        $ref: '#/definitions/user.User'
        type: object
      user_id:
        example: 1
        type: integer
    type: object
  response.ResponseMapper:
    properties:
      code:
        example: 200
        type: integer
      data:
        type: object
      message:
        example: Success getting all products
        type: string
    type: object
  user.User:
    properties:
      address:
        example: Ketaon, Banyudono, Boyolali
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      full_name:
        example: Cashier Primary
        type: string
      id:
        example: 1
        type: integer
      password:
        type: string
      phone:
        example: 0276 3283720
        type: string
      role_id:
        example: 1
        type: integer
      updated_at:
        type: string
      username:
        example: cashier
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: alman.alfaruq@gmail.com
    name: Almantera Tiantana Al Faruqi
    url: https://twitter.com/almanalfaruq
  description: This is a backend server for alfarpos.
  license: {}
  title: AlfarPOS BackEnd
  version: "1.0"
paths:
  /orders:
    post:
      consumes:
      - application/json
      description: |-
        New order is used for creating a new order by the order details per product.
        Order only need to specify the primitive data like the product_id, user_id, etc. without having to specify its object.
      parameters:
      - description: Order with order detail
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/order.Order'
      produces:
      - application/json
      responses:
        "200":
          description: Return order data
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  $ref: '#/definitions/order.Order'
              type: object
        "404":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
      summary: New order
      tags:
      - order
  /print/order:
    post:
      description: Print order bill by its invoice
      parameters:
      - description: Order invoice
        in: path
        name: invoice
        type: string
      produces:
      - application/pdf
      summary: Print order bill by its invoice
      tags:
      - print
  /products:
    get:
      description: Get Products based on query
      parameters:
      - description: name, unit, category, or code
        in: query
        name: searchBy
        type: string
      - description: If this empty, it will fetch all products
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return array of product
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
        "404":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Products based on query
      tags:
      - product
  /products/code/{code}:
    get:
      description: Get Product based on code
      parameters:
      - description: code of the product
        in: path
        name: coded
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return a product
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "404":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Product based on code
      tags:
      - product
  /products/id/{id}:
    get:
      description: Get Product based on id
      parameters:
      - description: id of the product
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Return a product
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  $ref: '#/definitions/model.Product'
              type: object
        "404":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
      summary: Get Product based on id
      tags:
      - product
  /products/upload_excel:
    post:
      description: |-
        Upload products from excel file (*.xlsx). First row should be the header with these column in order:
        Code (Barcode), Product Name, Sell Price, Quantity, Category Name, Buy Price, and Unit Name (pcs, bottle, etc.)
      parameters:
      - description: Name of the sheet
        in: path
        name: sheetName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Return array of product
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Product'
                  type: array
              type: object
        "404":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
      summary: Upload products from excel file
      tags:
      - product
  /users/login:
    post:
      description: Endpoint for getting the token for the logged in user
      parameters:
      - description: 'These field must be present: username, password'
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: Return a jwt token to be used for other requests
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
        "404":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
      summary: Login user
      tags:
      - user
  /users/register:
    post:
      description: 'Register new user (TODO: API caller should be a Manager or an
        Admin)'
      parameters:
      - description: 'These field must be present: username, password, fullname, address,
          phone, and role_id (1 = Admin; 2 = Manager; 3 = Cashier)'
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/user.User'
      produces:
      - application/json
      responses:
        "200":
          description: Return the new registered user
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  $ref: '#/definitions/user.User'
              type: object
        "404":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
        "500":
          description: Return error with message
          schema:
            allOf:
            - $ref: '#/definitions/response.ResponseMapper'
            - properties:
                data:
                  type: string
              type: object
      summary: Register new user
      tags:
      - user
swagger: "2.0"
