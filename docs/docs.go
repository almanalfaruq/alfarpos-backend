// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Almantera Tiantana Al Faruqi",
            "url": "https://twitter.com/almanalfaruq",
            "email": "alman.alfaruq@gmail.com"
        },
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/products": {
            "get": {
                "description": "Get Products based on query",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "product"
                ],
                "summary": "Get Products based on query",
                "parameters": [
                    {
                        "type": "string",
                        "description": "name, unit, category, or code",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "If this empty, it will fetch all products",
                        "name": "query",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Return array of product",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ResponseMapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Product"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Return error with message",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ResponseMapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Return error with message",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/response.ResponseMapper"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Category": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Category"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Product": {
            "type": "object",
            "properties": {
                "buy_price": {
                    "type": "integer",
                    "example": 10000
                },
                "category": {
                    "type": "object",
                    "$ref": "#/definitions/model.Category"
                },
                "category_id": {
                    "type": "integer",
                    "example": 1
                },
                "code": {
                    "type": "string",
                    "example": "unique-code"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "discount": {
                    "type": "number",
                    "example": 0.1
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "image_url": {
                    "type": "string",
                    "example": "http://localhost/image/image.jpg"
                },
                "name": {
                    "type": "string",
                    "example": "product name"
                },
                "quantity": {
                    "type": "integer",
                    "example": 10
                },
                "sell_price": {
                    "type": "integer",
                    "example": 15000
                },
                "unit": {
                    "type": "object",
                    "$ref": "#/definitions/model.Unit"
                },
                "unit_id": {
                    "type": "integer",
                    "example": 2
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "model.Unit": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Unit"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "response.ResponseMapper": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 200
                },
                "data": {
                    "type": "object"
                },
                "message": {
                    "type": "string",
                    "example": "Success getting all products"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8080",
	BasePath:    "/api/",
	Schemes:     []string{},
	Title:       "AlfarPOS BackEnd",
	Description: "This is a backend server for alfarpos.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
