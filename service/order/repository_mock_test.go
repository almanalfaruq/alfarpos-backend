// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package order is a generated GoMock package.
package order

import (
	model "github.com/almanalfaruq/alfarpos-backend/model"
	order "github.com/almanalfaruq/alfarpos-backend/model/order"
	product "github.com/almanalfaruq/alfarpos-backend/model/product"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockorderDetailRepositoryIface is a mock of orderDetailRepositoryIface interface
type MockorderDetailRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockorderDetailRepositoryIfaceMockRecorder
}

// MockorderDetailRepositoryIfaceMockRecorder is the mock recorder for MockorderDetailRepositoryIface
type MockorderDetailRepositoryIfaceMockRecorder struct {
	mock *MockorderDetailRepositoryIface
}

// NewMockorderDetailRepositoryIface creates a new mock instance
func NewMockorderDetailRepositoryIface(ctrl *gomock.Controller) *MockorderDetailRepositoryIface {
	mock := &MockorderDetailRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockorderDetailRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockorderDetailRepositoryIface) EXPECT() *MockorderDetailRepositoryIfaceMockRecorder {
	return m.recorder
}

// FindByOrder mocks base method
func (m *MockorderDetailRepositoryIface) FindByOrder(ord order.Order) ([]order.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOrder", ord)
	ret0, _ := ret[0].([]order.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOrder indicates an expected call of FindByOrder
func (mr *MockorderDetailRepositoryIfaceMockRecorder) FindByOrder(ord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOrder", reflect.TypeOf((*MockorderDetailRepositoryIface)(nil).FindByOrder), ord)
}

// New mocks base method
func (m *MockorderDetailRepositoryIface) New(orderDetail order.OrderDetail) (order.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", orderDetail)
	ret0, _ := ret[0].(order.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockorderDetailRepositoryIfaceMockRecorder) New(orderDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockorderDetailRepositoryIface)(nil).New), orderDetail)
}

// Update mocks base method
func (m *MockorderDetailRepositoryIface) Update(orderDetail order.OrderDetail) (order.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", orderDetail)
	ret0, _ := ret[0].(order.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockorderDetailRepositoryIfaceMockRecorder) Update(orderDetail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockorderDetailRepositoryIface)(nil).Update), orderDetail)
}

// Delete mocks base method
func (m *MockorderDetailRepositoryIface) Delete(id int64) (order.OrderDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(order.OrderDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockorderDetailRepositoryIfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockorderDetailRepositoryIface)(nil).Delete), id)
}

// DeleteByOrderId mocks base method
func (m *MockorderDetailRepositoryIface) DeleteByOrderId(id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByOrderId", id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByOrderId indicates an expected call of DeleteByOrderId
func (mr *MockorderDetailRepositoryIfaceMockRecorder) DeleteByOrderId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByOrderId", reflect.TypeOf((*MockorderDetailRepositoryIface)(nil).DeleteByOrderId), id)
}

// MockorderRepositoryIface is a mock of orderRepositoryIface interface
type MockorderRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockorderRepositoryIfaceMockRecorder
}

// MockorderRepositoryIfaceMockRecorder is the mock recorder for MockorderRepositoryIface
type MockorderRepositoryIfaceMockRecorder struct {
	mock *MockorderRepositoryIface
}

// NewMockorderRepositoryIface creates a new mock instance
func NewMockorderRepositoryIface(ctrl *gomock.Controller) *MockorderRepositoryIface {
	mock := &MockorderRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockorderRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockorderRepositoryIface) EXPECT() *MockorderRepositoryIfaceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockorderRepositoryIface) FindAll() []order.Order {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]order.Order)
	return ret0
}

// FindAll indicates an expected call of FindAll
func (mr *MockorderRepositoryIfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockorderRepositoryIface)(nil).FindAll))
}

// FindById mocks base method
func (m *MockorderRepositoryIface) FindById(id int64) (order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockorderRepositoryIfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockorderRepositoryIface)(nil).FindById), id)
}

// FindByInvoice mocks base method
func (m *MockorderRepositoryIface) FindByInvoice(invoice string) (order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByInvoice", invoice)
	ret0, _ := ret[0].(order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByInvoice indicates an expected call of FindByInvoice
func (mr *MockorderRepositoryIfaceMockRecorder) FindByInvoice(invoice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByInvoice", reflect.TypeOf((*MockorderRepositoryIface)(nil).FindByInvoice), invoice)
}

// FindByUserId mocks base method
func (m *MockorderRepositoryIface) FindByUserId(userId int64) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", userId)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId
func (mr *MockorderRepositoryIfaceMockRecorder) FindByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockorderRepositoryIface)(nil).FindByUserId), userId)
}

// FindByFilter mocks base method
func (m *MockorderRepositoryIface) FindByFilter(status []int32, invoice, startDate, endDate, sort string, limit, offset int32) ([]order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByFilter", status, invoice, startDate, endDate, sort, limit, offset)
	ret0, _ := ret[0].([]order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByFilter indicates an expected call of FindByFilter
func (mr *MockorderRepositoryIfaceMockRecorder) FindByFilter(status, invoice, startDate, endDate, sort, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByFilter", reflect.TypeOf((*MockorderRepositoryIface)(nil).FindByFilter), status, invoice, startDate, endDate, sort, limit, offset)
}

// New mocks base method
func (m *MockorderRepositoryIface) New(orderData order.Order) (order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", orderData)
	ret0, _ := ret[0].(order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockorderRepositoryIfaceMockRecorder) New(orderData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockorderRepositoryIface)(nil).New), orderData)
}

// Update mocks base method
func (m *MockorderRepositoryIface) Update(orderData order.Order) (order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", orderData)
	ret0, _ := ret[0].(order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockorderRepositoryIfaceMockRecorder) Update(orderData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockorderRepositoryIface)(nil).Update), orderData)
}

// UpdateStatus mocks base method
func (m *MockorderRepositoryIface) UpdateStatus(orderID int64, status int32) (order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", orderID, status)
	ret0, _ := ret[0].(order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus
func (mr *MockorderRepositoryIfaceMockRecorder) UpdateStatus(orderID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockorderRepositoryIface)(nil).UpdateStatus), orderID, status)
}

// Delete mocks base method
func (m *MockorderRepositoryIface) Delete(id int64) (order.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(order.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockorderRepositoryIfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockorderRepositoryIface)(nil).Delete), id)
}

// MockpaymentRepositoryIface is a mock of paymentRepositoryIface interface
type MockpaymentRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockpaymentRepositoryIfaceMockRecorder
}

// MockpaymentRepositoryIfaceMockRecorder is the mock recorder for MockpaymentRepositoryIface
type MockpaymentRepositoryIfaceMockRecorder struct {
	mock *MockpaymentRepositoryIface
}

// NewMockpaymentRepositoryIface creates a new mock instance
func NewMockpaymentRepositoryIface(ctrl *gomock.Controller) *MockpaymentRepositoryIface {
	mock := &MockpaymentRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockpaymentRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockpaymentRepositoryIface) EXPECT() *MockpaymentRepositoryIfaceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockpaymentRepositoryIface) FindAll() ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockpaymentRepositoryIfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockpaymentRepositoryIface)(nil).FindAll))
}

// FindById mocks base method
func (m *MockpaymentRepositoryIface) FindById(id int64) (model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockpaymentRepositoryIfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockpaymentRepositoryIface)(nil).FindById), id)
}

// FindByName mocks base method
func (m *MockpaymentRepositoryIface) FindByName(name string) ([]model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].([]model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName
func (mr *MockpaymentRepositoryIfaceMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockpaymentRepositoryIface)(nil).FindByName), name)
}

// New mocks base method
func (m *MockpaymentRepositoryIface) New(paymnt model.Payment) (model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", paymnt)
	ret0, _ := ret[0].(model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockpaymentRepositoryIfaceMockRecorder) New(paymnt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockpaymentRepositoryIface)(nil).New), paymnt)
}

// Update mocks base method
func (m *MockpaymentRepositoryIface) Update(paymnt model.Payment) (model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", paymnt)
	ret0, _ := ret[0].(model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockpaymentRepositoryIfaceMockRecorder) Update(paymnt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockpaymentRepositoryIface)(nil).Update), paymnt)
}

// Delete mocks base method
func (m *MockpaymentRepositoryIface) Delete(id int64) (model.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(model.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockpaymentRepositoryIfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockpaymentRepositoryIface)(nil).Delete), id)
}

// MockproductRepositoryIface is a mock of productRepositoryIface interface
type MockproductRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockproductRepositoryIfaceMockRecorder
}

// MockproductRepositoryIfaceMockRecorder is the mock recorder for MockproductRepositoryIface
type MockproductRepositoryIfaceMockRecorder struct {
	mock *MockproductRepositoryIface
}

// NewMockproductRepositoryIface creates a new mock instance
func NewMockproductRepositoryIface(ctrl *gomock.Controller) *MockproductRepositoryIface {
	mock := &MockproductRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockproductRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockproductRepositoryIface) EXPECT() *MockproductRepositoryIfaceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockproductRepositoryIface) FindAll() ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockproductRepositoryIfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindAll))
}

// FindAllWithLimit mocks base method
func (m *MockproductRepositoryIface) FindAllWithLimit(limit, offset int) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWithLimit", limit, offset)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithLimit indicates an expected call of FindAllWithLimit
func (mr *MockproductRepositoryIfaceMockRecorder) FindAllWithLimit(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithLimit", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindAllWithLimit), limit, offset)
}

// FindById mocks base method
func (m *MockproductRepositoryIface) FindById(id int64) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockproductRepositoryIfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindById), id)
}

// FindByIDs mocks base method
func (m *MockproductRepositoryIface) FindByIDs(IDs []int64) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", IDs)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs
func (mr *MockproductRepositoryIfaceMockRecorder) FindByIDs(IDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByIDs), IDs)
}

// FindByExactCode mocks base method
func (m *MockproductRepositoryIface) FindByExactCode(code string) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByExactCode", code)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByExactCode indicates an expected call of FindByExactCode
func (mr *MockproductRepositoryIfaceMockRecorder) FindByExactCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByExactCode", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByExactCode), code)
}

// SearchBy mocks base method
func (m *MockproductRepositoryIface) SearchBy(query string, limit, offset int) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBy", query, limit, offset)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBy indicates an expected call of SearchBy
func (mr *MockproductRepositoryIfaceMockRecorder) SearchBy(query, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBy", reflect.TypeOf((*MockproductRepositoryIface)(nil).SearchBy), query, limit, offset)
}

// FindByCode mocks base method
func (m *MockproductRepositoryIface) FindByCode(code string) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", code)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode
func (mr *MockproductRepositoryIfaceMockRecorder) FindByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByCode), code)
}

// FindByName mocks base method
func (m *MockproductRepositoryIface) FindByName(name string) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName
func (mr *MockproductRepositoryIfaceMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByName), name)
}

// FindByCategoryName mocks base method
func (m *MockproductRepositoryIface) FindByCategoryName(name string) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCategoryName", name)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCategoryName indicates an expected call of FindByCategoryName
func (mr *MockproductRepositoryIfaceMockRecorder) FindByCategoryName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCategoryName", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByCategoryName), name)
}

// FindByUnitName mocks base method
func (m *MockproductRepositoryIface) FindByUnitName(name string) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUnitName", name)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUnitName indicates an expected call of FindByUnitName
func (mr *MockproductRepositoryIfaceMockRecorder) FindByUnitName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUnitName", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByUnitName), name)
}

// New mocks base method
func (m *MockproductRepositoryIface) New(prd product.Product) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", prd)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockproductRepositoryIfaceMockRecorder) New(prd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockproductRepositoryIface)(nil).New), prd)
}

// Update mocks base method
func (m *MockproductRepositoryIface) Update(prd product.Product) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", prd)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockproductRepositoryIfaceMockRecorder) Update(prd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockproductRepositoryIface)(nil).Update), prd)
}

// Delete mocks base method
func (m *MockproductRepositoryIface) Delete(id int64) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockproductRepositoryIfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockproductRepositoryIface)(nil).Delete), id)
}

// DeleteAll mocks base method
func (m *MockproductRepositoryIface) DeleteAll() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockproductRepositoryIfaceMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockproductRepositoryIface)(nil).DeleteAll))
}

// MockcustomerRepositoryIface is a mock of customerRepositoryIface interface
type MockcustomerRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockcustomerRepositoryIfaceMockRecorder
}

// MockcustomerRepositoryIfaceMockRecorder is the mock recorder for MockcustomerRepositoryIface
type MockcustomerRepositoryIfaceMockRecorder struct {
	mock *MockcustomerRepositoryIface
}

// NewMockcustomerRepositoryIface creates a new mock instance
func NewMockcustomerRepositoryIface(ctrl *gomock.Controller) *MockcustomerRepositoryIface {
	mock := &MockcustomerRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockcustomerRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcustomerRepositoryIface) EXPECT() *MockcustomerRepositoryIfaceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockcustomerRepositoryIface) FindAll() ([]model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockcustomerRepositoryIfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockcustomerRepositoryIface)(nil).FindAll))
}

// FindById mocks base method
func (m *MockcustomerRepositoryIface) FindById(id int64) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockcustomerRepositoryIfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockcustomerRepositoryIface)(nil).FindById), id)
}

// New mocks base method
func (m *MockcustomerRepositoryIface) New(cstm model.Customer) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", cstm)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockcustomerRepositoryIfaceMockRecorder) New(cstm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockcustomerRepositoryIface)(nil).New), cstm)
}

// Update mocks base method
func (m *MockcustomerRepositoryIface) Update(cstm model.Customer) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", cstm)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockcustomerRepositoryIfaceMockRecorder) Update(cstm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockcustomerRepositoryIface)(nil).Update), cstm)
}

// Delete mocks base method
func (m *MockcustomerRepositoryIface) Delete(id int64) (model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockcustomerRepositoryIfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockcustomerRepositoryIface)(nil).Delete), id)
}
