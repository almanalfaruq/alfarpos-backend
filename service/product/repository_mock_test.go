// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package product is a generated GoMock package.
package product

import (
	model "github.com/almanalfaruq/alfarpos-backend/model"
	product "github.com/almanalfaruq/alfarpos-backend/model/product"
	stock "github.com/almanalfaruq/alfarpos-backend/model/stock"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockcategoryRepositoryIface is a mock of categoryRepositoryIface interface
type MockcategoryRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockcategoryRepositoryIfaceMockRecorder
}

// MockcategoryRepositoryIfaceMockRecorder is the mock recorder for MockcategoryRepositoryIface
type MockcategoryRepositoryIfaceMockRecorder struct {
	mock *MockcategoryRepositoryIface
}

// NewMockcategoryRepositoryIface creates a new mock instance
func NewMockcategoryRepositoryIface(ctrl *gomock.Controller) *MockcategoryRepositoryIface {
	mock := &MockcategoryRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockcategoryRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockcategoryRepositoryIface) EXPECT() *MockcategoryRepositoryIfaceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockcategoryRepositoryIface) FindAll() ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockcategoryRepositoryIfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockcategoryRepositoryIface)(nil).FindAll))
}

// FindById mocks base method
func (m *MockcategoryRepositoryIface) FindById(id int64) (model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockcategoryRepositoryIfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockcategoryRepositoryIface)(nil).FindById), id)
}

// FindByName mocks base method
func (m *MockcategoryRepositoryIface) FindByName(name string) ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName
func (mr *MockcategoryRepositoryIfaceMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockcategoryRepositoryIface)(nil).FindByName), name)
}

// New mocks base method
func (m *MockcategoryRepositoryIface) New(ct model.Category) (model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", ct)
	ret0, _ := ret[0].(model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockcategoryRepositoryIfaceMockRecorder) New(ct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockcategoryRepositoryIface)(nil).New), ct)
}

// Update mocks base method
func (m *MockcategoryRepositoryIface) Update(ct model.Category) (model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ct)
	ret0, _ := ret[0].(model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockcategoryRepositoryIfaceMockRecorder) Update(ct interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockcategoryRepositoryIface)(nil).Update), ct)
}

// Delete mocks base method
func (m *MockcategoryRepositoryIface) Delete(id int64) (model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockcategoryRepositoryIfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockcategoryRepositoryIface)(nil).Delete), id)
}

// MockproductRepositoryIface is a mock of productRepositoryIface interface
type MockproductRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockproductRepositoryIfaceMockRecorder
}

// MockproductRepositoryIfaceMockRecorder is the mock recorder for MockproductRepositoryIface
type MockproductRepositoryIfaceMockRecorder struct {
	mock *MockproductRepositoryIface
}

// NewMockproductRepositoryIface creates a new mock instance
func NewMockproductRepositoryIface(ctrl *gomock.Controller) *MockproductRepositoryIface {
	mock := &MockproductRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockproductRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockproductRepositoryIface) EXPECT() *MockproductRepositoryIfaceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockproductRepositoryIface) FindAll() ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockproductRepositoryIfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindAll))
}

// FindAllWithLimit mocks base method
func (m *MockproductRepositoryIface) FindAllWithLimit(limit, offset int) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWithLimit", limit, offset)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllWithLimit indicates an expected call of FindAllWithLimit
func (mr *MockproductRepositoryIfaceMockRecorder) FindAllWithLimit(limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithLimit", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindAllWithLimit), limit, offset)
}

// FindById mocks base method
func (m *MockproductRepositoryIface) FindById(id int64) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockproductRepositoryIfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindById), id)
}

// FindByIDs mocks base method
func (m *MockproductRepositoryIface) FindByIDs(IDs []int64) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", IDs)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs
func (mr *MockproductRepositoryIfaceMockRecorder) FindByIDs(IDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByIDs), IDs)
}

// FindByExactCode mocks base method
func (m *MockproductRepositoryIface) FindByExactCode(code string) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByExactCode", code)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByExactCode indicates an expected call of FindByExactCode
func (mr *MockproductRepositoryIfaceMockRecorder) FindByExactCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByExactCode", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByExactCode), code)
}

// GetMultipleProductByExactCode mocks base method
func (m *MockproductRepositoryIface) GetMultipleProductByExactCode(code string) (product.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMultipleProductByExactCode", code)
	ret0, _ := ret[0].(product.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMultipleProductByExactCode indicates an expected call of GetMultipleProductByExactCode
func (mr *MockproductRepositoryIfaceMockRecorder) GetMultipleProductByExactCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMultipleProductByExactCode", reflect.TypeOf((*MockproductRepositoryIface)(nil).GetMultipleProductByExactCode), code)
}

// SearchBy mocks base method
func (m *MockproductRepositoryIface) SearchBy(query string, limit, offset int) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchBy", query, limit, offset)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchBy indicates an expected call of SearchBy
func (mr *MockproductRepositoryIfaceMockRecorder) SearchBy(query, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchBy", reflect.TypeOf((*MockproductRepositoryIface)(nil).SearchBy), query, limit, offset)
}

// FindByCode mocks base method
func (m *MockproductRepositoryIface) FindByCode(code string) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCode", code)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCode indicates an expected call of FindByCode
func (mr *MockproductRepositoryIfaceMockRecorder) FindByCode(code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCode", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByCode), code)
}

// FindByName mocks base method
func (m *MockproductRepositoryIface) FindByName(name string) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName
func (mr *MockproductRepositoryIfaceMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByName), name)
}

// FindByCategoryName mocks base method
func (m *MockproductRepositoryIface) FindByCategoryName(name string) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByCategoryName", name)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByCategoryName indicates an expected call of FindByCategoryName
func (mr *MockproductRepositoryIfaceMockRecorder) FindByCategoryName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByCategoryName", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByCategoryName), name)
}

// FindByUnitName mocks base method
func (m *MockproductRepositoryIface) FindByUnitName(name string) ([]product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUnitName", name)
	ret0, _ := ret[0].([]product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUnitName indicates an expected call of FindByUnitName
func (mr *MockproductRepositoryIfaceMockRecorder) FindByUnitName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUnitName", reflect.TypeOf((*MockproductRepositoryIface)(nil).FindByUnitName), name)
}

// New mocks base method
func (m *MockproductRepositoryIface) New(p product.Product) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", p)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockproductRepositoryIfaceMockRecorder) New(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockproductRepositoryIface)(nil).New), p)
}

// Update mocks base method
func (m *MockproductRepositoryIface) Update(p product.Product) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", p)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockproductRepositoryIfaceMockRecorder) Update(p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockproductRepositoryIface)(nil).Update), p)
}

// Delete mocks base method
func (m *MockproductRepositoryIface) Delete(id int64) (product.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(product.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockproductRepositoryIfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockproductRepositoryIface)(nil).Delete), id)
}

// DeleteAll mocks base method
func (m *MockproductRepositoryIface) DeleteAll() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockproductRepositoryIfaceMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockproductRepositoryIface)(nil).DeleteAll))
}

// MockstockRepositoryIface is a mock of stockRepositoryIface interface
type MockstockRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockstockRepositoryIfaceMockRecorder
}

// MockstockRepositoryIfaceMockRecorder is the mock recorder for MockstockRepositoryIface
type MockstockRepositoryIfaceMockRecorder struct {
	mock *MockstockRepositoryIface
}

// NewMockstockRepositoryIface creates a new mock instance
func NewMockstockRepositoryIface(ctrl *gomock.Controller) *MockstockRepositoryIface {
	mock := &MockstockRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockstockRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockstockRepositoryIface) EXPECT() *MockstockRepositoryIfaceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockstockRepositoryIface) FindAll() ([]stock.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]stock.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockstockRepositoryIfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockstockRepositoryIface)(nil).FindAll))
}

// FindByProduct mocks base method
func (m *MockstockRepositoryIface) FindByProduct(product product.Product) (stock.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByProduct", product)
	ret0, _ := ret[0].(stock.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByProduct indicates an expected call of FindByProduct
func (mr *MockstockRepositoryIfaceMockRecorder) FindByProduct(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByProduct", reflect.TypeOf((*MockstockRepositoryIface)(nil).FindByProduct), product)
}

// New mocks base method
func (m *MockstockRepositoryIface) New(st stock.Stock) (stock.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", st)
	ret0, _ := ret[0].(stock.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockstockRepositoryIfaceMockRecorder) New(st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockstockRepositoryIface)(nil).New), st)
}

// Update mocks base method
func (m *MockstockRepositoryIface) Update(st stock.Stock) (stock.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", st)
	ret0, _ := ret[0].(stock.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockstockRepositoryIfaceMockRecorder) Update(st interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockstockRepositoryIface)(nil).Update), st)
}

// Delete mocks base method
func (m *MockstockRepositoryIface) Delete(id int64) (stock.Stock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(stock.Stock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockstockRepositoryIfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockstockRepositoryIface)(nil).Delete), id)
}

// DeleteAll mocks base method
func (m *MockstockRepositoryIface) DeleteAll() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll
func (mr *MockstockRepositoryIfaceMockRecorder) DeleteAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockstockRepositoryIface)(nil).DeleteAll))
}

// MockunitRepositoryIface is a mock of unitRepositoryIface interface
type MockunitRepositoryIface struct {
	ctrl     *gomock.Controller
	recorder *MockunitRepositoryIfaceMockRecorder
}

// MockunitRepositoryIfaceMockRecorder is the mock recorder for MockunitRepositoryIface
type MockunitRepositoryIfaceMockRecorder struct {
	mock *MockunitRepositoryIface
}

// NewMockunitRepositoryIface creates a new mock instance
func NewMockunitRepositoryIface(ctrl *gomock.Controller) *MockunitRepositoryIface {
	mock := &MockunitRepositoryIface{ctrl: ctrl}
	mock.recorder = &MockunitRepositoryIfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockunitRepositoryIface) EXPECT() *MockunitRepositoryIfaceMockRecorder {
	return m.recorder
}

// FindAll mocks base method
func (m *MockunitRepositoryIface) FindAll() ([]model.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]model.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockunitRepositoryIfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockunitRepositoryIface)(nil).FindAll))
}

// FindById mocks base method
func (m *MockunitRepositoryIface) FindById(id int64) (model.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", id)
	ret0, _ := ret[0].(model.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById
func (mr *MockunitRepositoryIfaceMockRecorder) FindById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockunitRepositoryIface)(nil).FindById), id)
}

// FindByName mocks base method
func (m *MockunitRepositoryIface) FindByName(name string) ([]model.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", name)
	ret0, _ := ret[0].([]model.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName
func (mr *MockunitRepositoryIfaceMockRecorder) FindByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockunitRepositoryIface)(nil).FindByName), name)
}

// New mocks base method
func (m *MockunitRepositoryIface) New(unit model.Unit) (model.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", unit)
	ret0, _ := ret[0].(model.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New
func (mr *MockunitRepositoryIfaceMockRecorder) New(unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockunitRepositoryIface)(nil).New), unit)
}

// Update mocks base method
func (m *MockunitRepositoryIface) Update(unit model.Unit) (model.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", unit)
	ret0, _ := ret[0].(model.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockunitRepositoryIfaceMockRecorder) Update(unit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockunitRepositoryIface)(nil).Update), unit)
}

// Delete mocks base method
func (m *MockunitRepositoryIface) Delete(id int64) (model.Unit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(model.Unit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockunitRepositoryIfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockunitRepositoryIface)(nil).Delete), id)
}
